import React, {
  createContext,
  useState,
  ReactNode,
  useEffect,
  useContext,
} from "react";
import { eq } from "drizzle-orm";
import { users } from "../db/schema";
import bcrypt from "react-native-bcrypt";
import { db } from "../db/db";
import * as Crypto from "expo-crypto";

bcrypt.setRandomFallback((len: any) => {
  // Generate secure random bytes
  const randomBytes = Crypto.getRandomBytes(len);
  return Array.from(randomBytes);
});

interface AuthContextType {
  user: { id: string; username: string; email: string } | null;
  isAuthenticated: boolean | undefined;
  register: (
    username: string,
    email: string,
    password: string
  ) => Promise<void>;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  resetPassword: (email: string, password: string) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({
  children,
}: {
  children: ReactNode;
}): JSX.Element => {
  const [user, setUser] = useState<AuthContextType["user"]>(null);
  const [isAuthenticated, setAuthenticated] = useState<boolean | undefined>(
    undefined
  );

  useEffect(() => {
    const checkAuthState = async () => {
      // Here, you can check if a user is authenticated (you can use a simple check like checking for a user in your DB)
      const currentUser = await db
        .select()
        .from(users)
        .where(eq(users.email, "some_email"))
        .get();

      if (currentUser) {
        setAuthenticated(true);

        setUser({
          id: currentUser.id.toString(), // Ensure to convert id to string if needed
          email: currentUser.email,
          username: currentUser.username || "Unknown", // Fetch from DB (assuming `name` is the username)
        });
      } else {
        setAuthenticated(false);
        setUser(null);
      }
    };

    checkAuthState(); // Call the function to check the user state
  }, []);

  const register = async (
    username: string,
    email: string,
    password: string
  ): Promise<void> => {
    console.log(username, email, password, "consoling auth side");
    try {
      const hashedPassword = bcrypt.hashSync(password, bcrypt.genSaltSync(10));

      // Insert the user into the database (id will be auto-generated by SQLite)
      await db
        .insert(users)
        .values({
          username,
          email,
          password: hashedPassword, // Hash in production
        })
        .run();

      // Fetch the user by email to get the auto-generated id
      const foundUser = await db
        .select()
        .from(users)
        .where(eq(users.email, email))
        .get();

      if (!foundUser) {
        throw new Error("User not found after registration.");
      }

      // Set the user context with the new id, name, and email
      setUser({
        id: foundUser.id.toString(), // Convert to string if necessary
        username: foundUser.username,
        email: foundUser.email,
      });

      alert("Registration successful!");
    } catch (error) {
      console.error(error);
      throw new Error("Registration failed. Please try again.");
    }
  };

  const login = async (email: string, password: string): Promise<void> => {
    try {
      // Ensure the query is awaited
      const foundUser = await db
        .select()
        .from(users)
        .where(eq(users.email, email))
        .get();

      if (!foundUser) {
        throw new Error("Invalid email or password.");
      }
      const isPasswordCorrect = bcrypt.compareSync(
        password,
        foundUser.password
      ); // Synchronous comparison

      if (!isPasswordCorrect) {
        throw new Error("Invalid email or password.");
      }
      // Set the user context with the id, name, and email
      setUser({
        id: foundUser.id.toString(), // Convert to string if necessary
        username: foundUser.username,
        email: foundUser.email,
      });

      alert(`Welcome back, ${foundUser.username}!`);
    } catch (error) {
      console.error(error);
      throw new Error("Login failed. Please try again.");
    }
  };

  const logout = (): void => {
    setUser(null);
  };

  const resetPassword = async (
    email: string,
    newPassword: string
  ): Promise<void> => {
    // Check if the email exists
    const foundUser = await db
      .select()
      .from(users)
      .where(eq(users.email, email))
      .get();

    if (!foundUser) {
      throw new Error("No user found with this email.");
    }

    const hashedPassword = bcrypt.hashSync(newPassword, bcrypt.genSaltSync(10));

    // Update the password in the database
    await db
      .update(users)
      .set({ password: hashedPassword })
      .where(eq(users.email, email))
      .run();
  };

  return (
    <AuthContext.Provider
      value={{ user, register, login, logout, isAuthenticated, resetPassword }}
    >
      {children}
    </AuthContext.Provider>
  );
};
export const useAuth = () => {
  const value = useContext(AuthContext);
  if (!value) {
    throw new Error("userAuth must be wrapped inside AuthContextProvider");
  }
  return value;
};
